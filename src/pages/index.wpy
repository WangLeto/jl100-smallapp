<style lang="less">
@import "../style/calendar.less";

.main {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  padding: 25px 0;
  box-sizing: border-box;
}
</style>
<template>
  <view class="main">
    <view class="demo5">
      <calendar
        calendar-style="calendar" header-style="header" board-style="board"
        binddayClick="chooseDay"
        @nextMonth="nextMonth"
        days-color="{{daysStyle}}"></calendar>
    </view>

    <view class="button-sp-area" style="margin-top: 40rpx">
      <view class="weui-cells__title">选择了 {{currentYear + '年' + currentMonth + '月' + currentDay + '日'}}</view>
      <picker @change="chooseTimes" value="{{times}}" range="{{timesArray}}" wx:if="{{alterableDay}}">
        <button class="weui-btn" type="primary">
          设置次数：{{todayTimes}}
        </button>
      </picker>
      <button class="weui-btn" type="default" plain="true" @tap="goSetting">设置</button>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
import dav from '../api/davApi';
import { accountExists } from '../api/saveLocal';
import _ from 'lodash';
import { colors, timesArray, chosenDayToken } from '../api/configure';

const MONTHS = ['Jan.', 'Feb.', 'Mar.', 'Apr.', 'May.', 'June.', 'July.', 'Aug.', 'Sept.', 'Oct.', 'Nov.', 'Dec.'];
export default class Index extends wepy.page {
  config = {
    usingComponents: {
      calendar: 'plugin://calendar/calendar'
    }
  };

  data = {
    year: new Date().getFullYear(),      // 年份
    month: new Date().getMonth() + 1,    // 月份
    day: new Date().getDate(),
    currentYear: new Date().getFullYear(),
    currentMonth: new Date().getMonth() + 1,
    currentDay: new Date().getDate(),
    str: MONTHS[new Date().getMonth()],  // 月份字符串
    daysStyle: null,
    times: null,
    timesArray: timesArray
  };

  computed = {
    todayTimes() {
      if (!this.times) {
        return '未选择';
      } else {
        return this.timesArray[this.times];
      }
    },
    alterableDay() {
      return this.currentYear <= this.year &&
        this.currentMonth <= this.month &&
        this.currentDay < this.day;
    }
  };

  methods = {
    goSetting() {
      wx.navigateTo({
        url: 'setting'
      });
    },
    chooseDay(e) {
      this.currentDay = e.detail.day;
      this.drawChosenDayAndToday();
    },
    nextMonth(e) {
      this.refreshCurrent(e.detail);
      this.refreshMonthStyle();
      this.drawChosenDayAndToday();
    },
    prevMonth(e) {
      this.refreshCurrent(e.detail);
      this.refreshMonthStyle();
      this.drawChosenDayAndToday();
    },
    dateChange(e) {
      this.refreshCurrent(e.detail);
      this.refreshMonthStyle();
      this.drawChosenDayAndToday();
    },
    chooseTimes(e) {
      this.times = e.detail.value;
    }
  };

  async onLoad() {
    if (await accountExists()) {
      this.text = await dav.getAsync();
      this.$apply();
    }
    this.refreshMonthStyle();
    this.drawChosenDayAndToday();
    this.$apply();
  }

  // 高亮选择的日期
  drawChosenDayAndToday() {
    this.eraseChosenRecoverRecord();
    let item = this.generateDayStyle(this.currentDay, colors.currentChosen, true);
    this.eraseDay(this.currentDay);
    this.daysStyle.push(item);
    // 绘制 today
    if (this.currentYear === this.year && this.currentMonth === this.month) {
      if (this.currentDay !== this.day) {
        this.eraseDay(this.day);
        this.daysStyle.push(this.generateDayStyle(this.day, colors.today));
      }
    }
  }

  // 更新日期
  refreshCurrent(detail) {
    this.currentYear = detail.currentYear;
    this.currentMonth = detail.currentMonth;
    this.currentDay = detail.day || 1;
  }

  // 移除当前月份的某一天
  eraseDay(day, style = this.daysStyle) {
    _.remove(style, { day: day });
  }

  // 移除高亮日期，并重绘记录
  eraseChosenRecoverRecord() {
    let token = chosenDayToken;
    let removed = _.remove(this.daysStyle, e => {
      if (e[token]) {
        return true;
      }
    });
    if (removed.length !== 0) {
      this.recover(removed[0]);
    }
  }

  // todo 重绘记录
  recover(removed) {
    const date = new Date(this.currentYear, this.currentMonth - 1, removed.day);
    let color = date.getDay() === 0 ? colors.sunday : colors.normalDay;
    this.daysStyle.push(this.generateDayStyle(removed.day, color));
  }

  refreshMonthStyle() {
    const days_count = new Date(this.currentYear, this.currentMonth, 0).getDate();
    let style = [];
    for (let i = 1; i <= days_count; i++) {
      const date = new Date(this.data.year, this.data.month - 1, i);
      if (date.getDay() === 0) {
        style.push(this.generateDayStyle(i, colors.sunday));
      } else {
        style.push(this.generateDayStyle(i, colors.normalDay));
      }
    }
    // 重绘选择的日期
    this.eraseDay(this.currentDay, style);
    style.push(this.generateDayStyle(this.currentDay, colors.currentChosen));
    this.daysStyle = style;
  }

  generateDayStyle(day, colors, chosenHighlight = false) {
    let obj = {
      month: 'current',
      day: day,
      color: colors.color,
      background: colors.back
    };
    if (chosenHighlight) {
      obj[chosenDayToken] = true;
    }
    return obj;
  }
}
</script>
