<style lang="less">
@import "../style/calendar.less";
@import "../style/index";
</style>
<template>
  <lockmask :lockOn.sync="lockOn"></lockmask>
  <view class="main">
    <view class="demo5">
      <calendar
        calendar-style="calendar" header-style="header" board-style="board"
        weeks-type="cn" show-more-days
        start-date="2015-01"
        end-date="2050-01"
        @dayClick="chooseDay"
        @nextMonth="nextMonth"
        @prevMonth="prevMonth"
        @dateChange="dateChange"
        days-color="{{daysStyle}}"></calendar>
      <view class="weui-cells__title">
        <view>选择了 {{currentYear}}年{{currentMonth}}月{{currentDay}}日</view>
        <view>{{alterableDay?'　':'仅能编辑今天或以前的日期'}}</view>
      </view>
    </view>

    <view class="button-sp-area">
      <picker @change="chooseTimes" class="{{alterableDay ? '' : 'hide'}}" value="{{currentTimes}}"
              range="{{timesArrayText}}">
        <button class="edit-record">
          {{editButtonText}}
        </button>
      </picker>
      <view class="buttons">
        <button @tap="goSetting">设置</button>
        <button @tap="goAnalyse">分析</button>
        <image class="sync" src="../assets/sync.png" @tap="sync" wx:if="{{manualSync}}"></image>
      </view>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
import LockMask from '../components/lockmask';
import dav from '../api/davApi';
import _ from 'lodash';
import tips from '../utils/tips';
import { colors, chosenDayToken, forceGetUnlockInfoFrequency } from '../api/configure';
import recordManager from '../utils/recordManager';
import settingManager from '../utils/settingManager';
import { colorMaker, colorTool } from '../utils/tools';
import { throttle } from '../utils/throttleUtil';

const MONTHS = ['Jan.', 'Feb.', 'Mar.', 'Apr.', 'May.', 'June.', 'July.', 'Aug.', 'Sept.', 'Oct.', 'Nov.', 'Dec.'];
export default class Index extends wepy.page {
  config = {
    usingComponents: {
      calendar: 'plugin://calendar/calendar'
    }
  };

  components = {
    lockmask: LockMask
  };

  data = {
    year: new Date().getFullYear(),      // 年份
    month: new Date().getMonth() + 1,    // 月份
    day: new Date().getDate(),
    currentYear: new Date().getFullYear(),
    currentMonth: new Date().getMonth() + 1,
    currentDay: new Date().getDate(),
    str: MONTHS[new Date().getMonth()],  // 月份字符串
    daysStyle: null,
    currentTimes: 0,
    timesArray: null,
    timesArrayText: null,
    records: null,
    manualSync: false,
    binaryShow: false,
    lockOn: false
  };

  computed = {
    editButtonText() {
      let times = this.getDayRecord(this.currentDay).t;
      this.currentTimes = times;
      if (!this.timesArrayText) {
        return '';
      }
      if (!times) {
        if (this.currentYear === this.year && this.currentMonth === this.month &&
          this.currentDay === this.day) {
          return '编辑今天的记录';
        }
        return `编辑${this.currentMonth}月${this.currentDay}日记录`;
      } else {
        return this.timesArrayText[times];
      }
    },
    alterableDay() {
      return this.isAlterable();
    }
  };

  isAlterable() {
    let current = new Date(this.currentYear, this.currentMonth - 1, this.currentDay);
    let today = new Date(this.year, this.month - 1, this.day + 1);
    return current.getTime() < today.getTime();
  }

  methods = {
    goSetting() {
      throttle(function() {
        wx.navigateTo({
          url: 'setting'
        });
      });
    },
    chooseDay(e) {
      this.currentDay = e.detail.day;
      this.drawChosenDayAndToday();
    },
    nextMonth(e) {
      this.refreshCurrent(e.detail);
      this.refreshMonthStyle();
      this.drawChosenDayAndToday();
    },
    prevMonth(e) {
      this.refreshCurrent(e.detail);
      this.refreshMonthStyle();
      this.drawChosenDayAndToday();
    },
    dateChange(e) {
      this.refreshCurrent(e.detail);
      this.refreshMonthStyle();
      this.drawChosenDayAndToday();
    },
    async chooseTimes(e) {
      let records = await recordManager.addRecord(this.currentYear, this.currentMonth, this.currentDay, e.detail.value);
      console.log(records);
      this.records = records;
      this.$apply();
      if (!this.manualSync) {
        dav.putStr(records);
      }
    },
    async sync() {
      if (!(await dav.validNetwork())) {
        tips.toastErr('网络错误');
        return;
      }
      await dav.putStrAsync(this.records);
      tips.toastSuccess('上传成功');
    },
    goAnalyse() {
      throttle(function() {
        wx.navigateTo({
          url: 'analyse'
        });
      });
    }
  };

  async onLoad() {
    this.lockOn = wepy.$instance.globalData.lockOn;
    this.records = await recordManager.getRecords(this);
    this.refreshMonthStyle();
    this.drawChosenDayAndToday();
    this.$apply();
    if (settingManager.get(settingManager.keys.firstUse)) {
      settingManager.set(settingManager.keys.firstUse, false);
      this.showGuide();
    }
  }

  // 显示初次使用引导
  showGuide() {
    wx.showModal({
      title: '初次使用引导',
      content: '你可能是初次使用本程序，可以进行不良记录的频次设置（自行进入：设置-频次设置），默认为0-5共6级',
      confirmText: '前往设置',
      success: (e) => {
        if (e.confirm) {
          wx.navigateTo({
            url: 'times'
          });
        } else {
          tips.toastText('你可以随时进入 [设置-频次设置] 进行频次设置', 3500);
        }
      }
    });
  }

  // 高亮选择的日期
  drawChosenDayAndToday() {
    this.eraseChosenRecoverRecord();
    let item = this.generateDayStyle(this.currentDay, colors.currentChosen, true);
    this.eraseDay(this.currentDay);
    this.daysStyle.push(item);
    // 绘制 today
    if (this.currentYear === this.year && this.currentMonth === this.month) {
      if (this.currentDay !== this.day) {
        this.eraseDay(this.day);
        this.daysStyle.push(this.generateDayStyle(this.day, colors.today));
      }
    }
  }

  // 更新日期
  refreshCurrent(detail) {
    console.log(detail.currentYear, detail.currentMonth);
    this.currentYear = detail.currentYear;
    this.currentMonth = detail.currentMonth;
    this.currentDay = detail.day || 1;
  }

  // 移除当前月份的某一天
  eraseDay(day, style = this.daysStyle) {
    _.remove(style, { day: day });
  }

  // 移除高亮日期，并重绘记录
  eraseChosenRecoverRecord() {
    let token = chosenDayToken;
    let removed = _.remove(this.daysStyle, e => {
      if (e[token]) {
        return true;
      }
    });
    if (removed.length !== 0) {
      this.recover(removed[0]);
    }
  }

  recover(removed) {
    const date = new Date(this.currentYear, this.currentMonth - 1, removed.day);
    let record = this.getDayRecord(removed.day);
    if (record && record.t) {
      this.daysStyle.push(this.generateDayStyle(removed.day, {
        back: colorMaker.getColor(record.t, this.binaryShow)
      }));
    } else {
      let color = date.getDay() === 0 ? colors.sunday : colors.normalDay;
      this.daysStyle.push(this.generateDayStyle(removed.day, color));
    }
  }

  refreshMonthStyle() {
    console.log('refresh month style');
    const days_count = new Date(this.currentYear, this.currentMonth, 0).getDate();
    let style = [];
    for (let i = 1; i <= days_count; i++) {
      const date = new Date(this.currentYear, this.currentMonth - 1, i);
      if (date.getDay() === 0) {
        style.push(this.generateDayStyle(i, colors.sunday));
      } else {
        style.push(this.generateDayStyle(i, colors.normalDay));
      }
    }

    // 遍历并绘制记录
    let year = this.currentYear % 100 + '';
    let month = this.currentMonth > 9 ? '' + this.currentMonth : '0' + this.currentMonth;
    if (this.records && this.records.items) {
      _.forEach(this.records.items, item => {
        let dateToken = item.d;
        let tokens = dateToken.split('-');
        if (tokens[0] === year && tokens[1] === month) {
          let day = parseInt(tokens[2]);
          this.eraseDay(day, style);
          style.push(this.generateDayStyle(day, {
            back: colorMaker.getColor(item.t, this.binaryShow)
          }));
        }
      });
    }

    // 重绘选择的日期
    this.eraseDay(this.currentDay, style);
    style.push(this.generateDayStyle(this.currentDay, colors.currentChosen));

    this.daysStyle = style;
  }

  // 获取当前月某天的记录
  getDayRecord(day) {
    if (!this.records) {
      return {};
    }
    let record = {};
    let year = this.currentYear % 100 + '';
    let month = this.currentMonth > 9 ? '' + this.currentMonth : '0' + this.currentMonth;
    day = typeof day === 'string' ? day : day + '';
    day = day.length > 1 ? day : '0' + day;
    _.forEach(this.records.items, item => {
      let dateToken = item.d;
      let tokens = dateToken.split('-');
      if (tokens[0] === year && tokens[1] === month && tokens[2] === day + '') {
        record = item;
        return false;
      }
    });
    return record;
  }

  generateDayStyle(day, colors, chosenHighlight = false) {
    let color = colors.color;
    if (!color) {
      color = colorTool.tooBright(colorTool.hexToRgb(colors.back)) ? '#000' : '#fff';
    }
    let obj = {
      month: 'current',
      day: day,
      color: color,
      background: colors.back
    };
    if (chosenHighlight) {
      obj[chosenDayToken] = true;
    }
    return obj;
  }

  async onShow() {
    if (this.$parent.globalData.reloadData) {
      this.$parent.globalData.reloadData = false;
      this.records = this.$parent.globalData.tmpRecords;
    }

    this.timesArray = await settingManager.get(settingManager.keys.timesArray);
    this.timesArrayText = _.map(this.timesArray, 'text');
    this.manualSync = await settingManager.get(settingManager.keys.manualSync);
    let binaryShow = await settingManager.get(settingManager.keys.binaryShow);
    if (binaryShow !== this.binaryShow) {
      this.binaryShow = binaryShow;
    }
    this.refreshMonthStyle();
    this.drawChosenDayAndToday();
    this.$apply();
  }
}
</script>
