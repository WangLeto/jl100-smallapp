<style lang="less">
@import "../style/analyse";
</style>
<template>
  <view class="page__hd">
    <view class="page__title">分析</view>
    <view class="page__desc">统计你的习惯</view>
  </view>
  <view class="page__desc">
    <radio-group @change="radioChange">
      <radio checked="{{radio === CHART_SHOW_ALL}}" value="0">全部</radio>
      <radio checked="{{radio === CHART_SHOW_YEAR}}" value="1">年度</radio>
      <radio checked="{{radio === CHART_SHOW_MONTH}}" value="2">月度</radio>
    </radio-group>
    <picker @change="chooseAnalysing1" value="{{chartYearPickerChoice}}" range="{{range}}"
            wx:if="{{radio === CHART_SHOW_YEAR}}">
      <button class="">
        {{range[chartYearPickerChoice]}}
      </button>
    </picker>
    <picker @change="chooseAnalysing1" start="{{chartMonthPickerStart}}" end="{{chartMonthPickerEnd}}" mode="date"
            value="{{chartMonthPickerChoice}}"
            wx:if="{{radio === CHART_SHOW_MONTH}}" fields="month">
      <button class="">
        {{chartMonthPickerChoice}}
      </button>
    </picker>
  </view>
  <view class="weui-cells__title">频次直方图</view>
  <canvas canvas-id="columnChart"></canvas>
  <view class="weui-cells__title">频数折线图</view>
  <canvas canvas-id="lineChart" disable-scroll="{{useSlide ? true : false}}" @touchstart="touchHandler"
          @touchmove="moveHandler"
          @touchend="touchEndHandler"></canvas>
  <view class="weui-cells__title switch">滑动查看折线图</view>
  <view class="weui-cells weui-cells_after-title">
    <view class="weui-cell weui-cell_switch">
      <view class="weui-cell__bd">启用滑动</view>
      <view class="weui-cell__ft">
        <switch checked="{{useSlide}}" @change="changeUseSlide"/>
      </view>
    </view>
  </view>
  <view class="weui-media-box__info">开启后，无法在折线图区域上下拖动页面</view>
</template>
<script>
import wepy from 'wepy';
import _ from 'lodash';
import tips from '../utils/tips';
import wxCharts from '../utils/wxcharts-min';
import saveLocal from '../api/saveLocal';
import settingManager from '../utils/settingManager';

let columnChart = null;
let lineChart = null;
export default class Analyse extends wepy.page {
  data = {
    CHART_SHOW_ALL: 0,
    CHART_SHOW_YEAR: 1,
    CHART_SHOW_MONTH: 2,
    recordsItems: null,
    // 柱状图：次数直方统计
    columnData: null,
    // 直方图选择视角：0 全部 1 年度 2 月度
    radio: 0,
    range: [],
    chartMonthPickerStart: null,
    chartMonthPickerEnd: null,
    chartYearPickerChoice: 0,
    // '2018-05'
    chartMonthPickerChoice: '',
    // 复合设置
    times: null,
    windowWidth: 350,
    useSlide: false
  };

  methods = {
    touchHandler: function(e) {
      lineChart.scrollStart(e);
    },
    moveHandler: function(e) {
      lineChart.scroll(e);
    },
    touchEndHandler: function(e) {
      lineChart.scrollEnd(e);
      lineChart.showToolTip(e, {
        format: function(item, category) {
          return category + ' 次数' + ':' + item.data;
        }
      });
    },
    radioChange(e) {
      this.radio = parseInt(e.detail.value);
      let dateToken = _.sortBy(_.uniqBy(_.map(this.recordsItems, e => {
        return e.d.slice(0, this.radio === this.CHART_SHOW_YEAR ? 2 : 5);
      }))).reverse();
      console.log(dateToken);
      if (this.radio === this.CHART_SHOW_YEAR) {
        this.range = _.map(dateToken, e => {
          return '20' + e;
        });
      } else {
        if (this.chartMonthPickerChoice === '') {
          this.chartMonthPickerChoice = '20' + dateToken[0];
        }
      }
      this.refreshColumn();
      this.refreshLine();
    },
    chooseAnalysing1(e) {
      let choice = e.detail.value;
      if (this.radio === this.CHART_SHOW_YEAR) {
        this.chartYearPickerChoice = parseInt(choice);
      } else {
        this.chartMonthPickerChoice = choice;
      }
      this.refreshColumn();
      this.refreshLine();
    },
    changeUseSlide(e) {
      this.useSlide = e.detail.value;
      this.refreshLine(true);
      if (this.useSlide) {
        tips.toastSuccess('左右滑动查看');
      } else {
        tips.toastSuccess('关闭滑动模式');
      }
    }
  };

  refreshColumn() {
    let records = this.getRecordsForRefresh();
    let newData = this.generateColumnSeries(this.calcFrequency(records));
    columnChart.updateData({
      series: newData
    });
  }

  getRecordsForRefresh() {
    let records = this.recordsItems;
    if (this.radio === this.CHART_SHOW_YEAR) {
      // type: string
      let year = this.range[this.chartYearPickerChoice].slice(2);
      records = _.filter(records, e => {
        return e.d.slice(0, 2) === year;
      });
    } else if (this.radio === this.CHART_SHOW_MONTH) {
      let yearMonth = this.chartMonthPickerChoice.slice(2);
      records = _.filter(records, e => {
        return e.d.slice(0, 5) === yearMonth;
      });
    }
    return records;
  }

  refreshLine(needRenew = false) {
    let records = this.getRecordsForRefresh();
    let range = null;
    let func = null;
    if (this.radio === this.CHART_SHOW_ALL) {
      let yearStart = parseInt(this.chartMonthPickerStart.slice(0, 4));
      let yearEnd = parseInt(this.chartMonthPickerEnd.slice(0, 4));
      range = Array.from(new Array(yearEnd - yearStart + 1), (e, idx) => yearStart + idx);
      func = (e, r) => {
        return e.slice(0, 2) === (r % 100) + '';
      };
    } else if (this.radio === this.CHART_SHOW_YEAR) {
      range = Array.from(new Array(12), (e, idx) => idx + 1);
      func = (e, r) => {
        return parseInt(e.split('-')[1]) === r;
      };
    } else if (this.radio === this.CHART_SHOW_MONTH) {
      let dateToken = this.chartMonthPickerChoice.split('-');
      let days = new Date(parseInt(dateToken[0]), parseInt(dateToken[1]), 0).getDate();
      range = Array.from(new Array(days), (e, idx) => idx + 1);
      func = (e, r) => {
        return parseInt(e.split('-')[2]) === r;
      };
    }
    let series = this.generateLineSeries(this.calcTimes(records, range, func));
    let measure = this.radio === this.CHART_SHOW_MONTH ? '日' : this.radio === this.CHART_SHOW_YEAR ? '月' : '年';
    range = _.map(range, e => e + (measure));
    let newData = {
      series: series,
      categories: range
    };
    if (this.radio === this.CHART_SHOW_MONTH) {
      newData.enableScroll = true;
    }
    if (needRenew) {
      lineChart = this.newLineChart(range, series, this.useSlide);
    } else {
      lineChart.updateData(newData);
    }
  }

  calcFrequency(filteredRecordsItems) {
    let frequency = Array.from(new Array(this.times.length), () => 0);
    _.forEach(filteredRecordsItems, e => {
      _.forEach(frequency, (f, idx) => {
        if (idx === parseInt(e.t)) {
          frequency[idx]++;
        }
      });
    });
    return frequency;
  }


  calcTimes(records, range, match_func) {
    let timesArray = _.map(this.times, 'num');
    let times = Array.from(new Array(range.length), () => 0);
    _.forEach(records, e => {
      _.forEach(range, (r, idx) => {
        // debugger;
        if (match_func(e.d, r)) {
          times[idx] += timesArray[parseInt(e.t)];
        }
      });
    });
    return times;
  }

  generateColumnSeries(frequency) {
    return [{
      name: '频次',
      data: frequency,
      format: val => val + '次'
    }];
  }

  generateLineSeries(times) {
    return [{
      name: '日期',
      data: times,
      format: function(val) {
        return val + '次';
      }
    }];
  }

  async onLoad() {
    try {
      var res = wx.getSystemInfoSync();
      this.windowWidth = res.windowWidth * .95;
    } catch (e) {
      console.error('getSystemInfoSync failed!');
    }

    let records = await saveLocal.getRecordParsed();
    if (!records) {
      wx.showModal({
        title: '暂无数据',
        content: '请积累一定使用数据后进行分析',
        showCancel: false,
        success: () => {
          wx.navigateBack();
        }
      });
      return;
    }
    this.recordsItems = records.items;
    this.times = await settingManager.get(settingManager.keys.timesArray);

    let dateToken = _.sortBy(_.uniqBy(_.map(this.recordsItems, e => {
      return e.d.slice(0, 5);
    }))).reverse();
    this.chartMonthPickerEnd = '20' + dateToken[0] + '-01';
    this.chartMonthPickerStart = '20' + dateToken[dateToken.length - 1] + '-01';

    let timesShow = _.map(this.times, 'text');
    let frequency = this.calcFrequency(this.recordsItems);
    let series = this.generateColumnSeries(frequency);
    let windowWidth = this.windowWidth;
    columnChart = new wxCharts({
      animation: true,
      canvasId: 'columnChart',
      type: 'column',
      categories: timesShow,
      series: series,
      yAxis: {
        title: '发生天数',
        format: function(val) {
          return val + '天';
        }
      },
      width: windowWidth,
      height: 250,
      background: '#f8f8f8'
    });

    let yearStart = parseInt(this.chartMonthPickerStart.slice(0, 4));
    let yearEnd = parseInt(this.chartMonthPickerEnd.slice(0, 4));
    let range = Array.from(new Array(yearEnd - yearStart + 1), (e, idx) => yearStart + idx);
    let times = this.calcTimes(this.recordsItems, range, (e, r) => {
      return e.slice(0, 2) === (r % 100) + '';
    });
    let data = this.generateLineSeries(times);
    range = _.map(range, e => e + '年');
    lineChart = this.newLineChart(range, data);
  }

  newLineChart(range, data, useSlide = false) {
    console.log('启用' + useSlide);
    let windowWidth = this.windowWidth;
    return new wxCharts({
      canvasId: 'lineChart',
      type: 'line',
      categories: range,
      series: data,
      yAxis: {
        title: '次数',
        min: 0
      },
      enableScroll: useSlide ? true : false,
      width: windowWidth,
      height: 250,
      background: '#f8f8f8'
    });
  }

}
</script>
