<style lang="less">
@import "../style/analyse";
</style>
<template>
  <view class="page__hd">
    <view class="page__title">分析</view>
    <view class="page__desc">统计你的习惯</view>
  </view>
  <view class="page__desc">
    <radio-group @change="radioChange">
      <radio checked="{{radio === CHART_SHOW_ALL}}" value="0">全部</radio>
      <radio checked="{{radio === CHART_SHOW_YEAR}}" value="1">年度</radio>
      <radio checked="{{radio === CHART_SHOW_MONTH}}" value="2">月度</radio>
    </radio-group>
    <picker @change="chooseAnalysing1" value="{{chartYearPickerChoice}}" range="{{range}}"
            wx:if="{{radio === CHART_SHOW_YEAR}}">
      <button class="">
        {{range[chartYearPickerChoice]}}
      </button>
    </picker>
    <picker @change="chooseAnalysing1" start="{{chartMonthPickerStart}}" end="{{chartMonthPickerEnd}}" mode="date"
            value="{{chartMonthPickerChoice}}"
            wx:if="{{radio === CHART_SHOW_MONTH}}" fields="month">
      <button class="">
        {{chartMonthPickerChoice}}
      </button>
    </picker>
  </view>
  <view class="weui-cells__title">频次统计图</view>
  <canvas canvas-id="columnChart"></canvas>
  <canvas canvas-id="lineChart"></canvas>
</template>
<script>
import wepy from 'wepy';
import _ from 'lodash';
import wxCharts from '../utils/wxcharts-min';
import saveLocal from '../api/saveLocal';
import settingManager from '../utils/settingManager';

let columnChart = null;
let lineChart = null;
export default class Analyse extends wepy.page {
  data = {
    CHART_SHOW_ALL: 0,
    CHART_SHOW_YEAR: 1,
    CHART_SHOW_MONTH: 2,
    recordsItems: null,
    // 柱状图：次数直方统计
    columnData: null,
    // 直方图选择视角：0 全部 1 年度 2 月度
    radio: 0,
    range: [],
    chartMonthPickerStart: null,
    chartMonthPickerEnd: null,
    chartYearPickerChoice: 0,
    chartMonthPickerChoice: '',
    // 复合设置
    times: null
  };

  computed = {};

  methods = {
    radioChange(e) {
      this.radio = parseInt(e.detail.value);
      let dateToken = _.sortBy(_.uniqBy(_.map(this.recordsItems, e => {
        return e.d.slice(0, this.radio === this.CHART_SHOW_YEAR ? 2 : 5);
      }))).reverse();
      console.log(dateToken);
      if (this.radio === this.CHART_SHOW_YEAR) {
        this.range = _.map(dateToken, e => {
          return '20' + e;
        });
      } else {
        this.chartMonthPickerEnd = '20' + dateToken[0] + '-01';
        this.chartMonthPickerStart = '20' + dateToken[dateToken.length - 1] + '-01';
        if (this.chartMonthPickerChoice === '') {
          this.chartMonthPickerChoice = '20' + dateToken[0];
        }
      }
      this.refreshColumn();
    },
    chooseAnalysing1(e) {
      let choice = e.detail.value;
      if (this.radio === this.CHART_SHOW_YEAR) {
        this.chartYearPickerChoice = parseInt(choice);
      } else {
        this.chartMonthPickerChoice = choice;
      }
      this.refreshColumn();
    }
  };

  refreshColumn() {
    let records = this.recordsItems;
    if (this.radio === this.CHART_SHOW_YEAR) {
      let year = this.range[this.chartYearPickerChoice].slice(2);
      // type: string
      records = _.filter(records, e => {
        return e.d.slice(0, 2) === year;
      });
    } else if (this.radio === this.CHART_SHOW_MONTH) {
      let yearMonth = this.chartMonthPickerChoice.slice(2);
      records = _.filter(records, e => {
        return e.d.slice(0, 5) === yearMonth;
      });
    }
    let newData = this.generateColumnSeries(this.calcFrequency(records));
    columnChart.updateData({
      series: newData
    });
  }

  calcFrequency(filteredRecordsItems) {
    let frequency = Array.from(new Array(this.times.length), () => 0);
    _.forEach(filteredRecordsItems, e => {
      _.forEach(frequency, (f, idx) => {
        if (idx === parseInt(e.t)) {
          frequency[idx]++;
        }
      });
    });
    return frequency;
  }

  generateColumnSeries(frequency) {
    return [{
      name: '频次',
      data: frequency,
      format: val => val + '次'
    }];
  }

  async onLoad() {
    this.recordsItems = (await saveLocal.getRecordParsed()).items;
    this.times = await settingManager.get(settingManager.keys.timesArray);
    let timesShow = _.map(this.times, 'text');
    let frequency = await this.calcFrequency(this.recordsItems);
    let series = this.generateColumnSeries(frequency);
    columnChart = new wxCharts({
      animation: true,
      canvasId: 'columnChart',
      type: 'column',
      categories: timesShow,
      series: series,
      yAxis: {
        title: '发生天数',
        format: function(val) {
          return val + '天';
        }
      },
      width: 350,
      height: 250,
      background: '#f8f8f8'
    });
    lineChart = new wxCharts({
      canvasId: 'lineChart',
      type: 'line',
      categories: ['2012', '2013', '2014', '2015', '2016', '2017'],
      series: [{
        name: '成交量1',
        data: [0.15, 0.2, 0.45, 0.37, 0.4, 0.8],
        format: function(val) {
          return val.toFixed(2) + '万';
        }
      }],
      yAxis: {
        title: '成交金额 (万元)',
        format: function(val) {
          return val.toFixed(2);
        },
        min: 0
      },
      width: 350,
      height: 250,
      background: '#f8f8f8'
    });
  }


}
</script>
